// @ts-check

// 프레임워크 없이 간단한 토이프로젝트 웹 서버 만들어보기

/**
 * 블로그 포스팅 서비스
 * 데이터베이스 사용 x
 * - 로컬 파일을 데이터베이스로 사용할 예정 (JSON)
 * - 인증 로직은 넣지 않는다.
 * - RESTful API를 사용한다. (HTTP의 작은 서비스만 사용한다.
 *   즉, Get하고 뒤에 주소가 붙거나 POST하고 주소가 없는경우 REST의 HTTP 메소드들을 사용
 *   뒤의 주소와 결합되어 어떤것을 나타내는지 알기 쉽다. 테스트하기 편리하고 사람이 보기 편한 구조임.)
 * */

/**
 * nodemon을 이용한 자동 서버 실행 명령어 npm run server
 * 도메인 호출 명령어 http localhost:4000
 */

// HTTP 모듈 설정
const http = require('http')

// 타입을 미리 정의하여 VScode가 빠르게 문제가 생긴 것을 알려준다,
/**
 * 현재는 jsdoc 사용중
 * jsdoc은 주석을 파악하여 자동으로 타입 변환을 해준다.
 * 타입스크립트가 jddoc를 파싱해서 미리 에러를 내준다.
 * 타입을 미리 써가며 문서화를 하면 코딩할때 편한 장점이 있다.
 */

/**
 * @typedef Post
 * @property {string} id
 * @property {string} title
 * @property {string} content
 */

/** @type {Post[]} */
const posts = [
  {
    id: 'my_first_post',
    title: 'My first post',
    content: 'Hello!',
  },
  {
    id: 'my_second_post',
    title: '나의 두번째 포스트',
    content: 'Second post!',
  },
]

/**
 * Post
 *
 * 포스트 전체 조회 리스트 API
 * GET /posts
 *
 * 특정한 포스트 조회 API
 * GET /posts/:id
 *
 * POST /posts
 *
 */

const server = http.createServer((req, res) => {
  const POSTS_ID_REGEX = /^\/posts\/([a-zA-Z0-9-_]+)$/
  const postIdRegexResult =
    (req.url && POSTS_ID_REGEX.exec(req.url)) || undefined

  // /posts는 모든 포스트의 목록을 가져오는 API postIdRegexResult는 하나의 포스트의 정보를 구체적으로 가져오는 API
  // 1. 전체 posts 읽기 API
  if (req.url === '/posts' && req.method === 'GET') {
    const result = {
      posts: posts.map((post) => ({
        id: post.id,
        title: post.title,
      })),
      totalCount: posts.length,
    }

    res.statusCode = 200
    res.setHeader('Content-type', 'application/json; encoding=utf=8') // 응답의 타입을 json문서로 보내고 있기 때문에 쉽게 알아보기 위해서는 json형태로 content타입이 내려가는 것을 알려주어야 한다.
    res.end(JSON.stringify(result))
  } else if (postIdRegexResult && req.method === 'GET') {
    // 2. posts 하나 읽기 API
    // GET /posts/:id
    // 하나의 posts만 가져오고 싶을경우? postId와 동일한 posts를 찾으면 된다
    const postId = postIdRegexResult[1] // 아이디를 통해 체크 하기위한 부분
    const post = posts.find((_post) => _post.id === postId)

    if (post) {
      res.statusCode = 200
      res.setHeader('Content-type', 'application/json; encoding=utf=8') // 가독성이 좋아지는 장점이 있다.
      res.end(JSON.stringify(post))
    } else {
      res.statusCode = 404
      res.end('Post Not found.')
    }
  } else if (req.url === '/posts' && req.method === 'POST') {
    // 3. posts 만들기 API
    /**
     * 포스트를 새로 만드면 입력을 기대하는 것은 타이틀과 컨텐트
     * POST 방식으로 http로 요청을 줄때 http POST localhost:4000/posts title=foo content=bar --print=hHbB 로 요청을 주면 되며
     * --print=hHbB에서 h와 b는 각각 응답의 헤더와 body를 말하고
     * H와 B는 각각 요청의 헤더와 body를 말한다.
     */
    req.setEncoding('utf-8') // 바이너리 값 출력 막기위해 작성
    req.on('data', (data) => {
      /**
       *  @typedef CreatePostBody
       *  @property {string} title
       *  @property {string} content
       */

      /** @type {CreatePostBody} */

      const body = JSON.parse(data) // JSON 데이터 파싱
      posts.push({
        id: body.title.toLowerCase().replace(/\s/g, '_'), // id는 타이틀을 소문자로 정규식을 사용하여 모든 공백울 공백을 언더바로 바꿔준다.
        title: body.title,
        content: body.content,
      })
    })

    res.statusCode = 200
    res.end('Creating post')
  } else {
    res.statusCode = 404
    res.end('Not found!!.')
  }
})

const PORT = 4000

server.listen(PORT, () => {
  console.log(`the server is listening at port: ${PORT}`)
})
 